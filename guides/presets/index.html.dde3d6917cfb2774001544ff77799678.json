{"head":{"title":"Presets","layout":"Guide","order":4,"description":"What are presets? Presets are a way of loading cssnano with different features, depending on your use case, and they were introduced inâ€¦"},"body":"<h2 id=\"what-are-presets\"><a href=\"#what-are-presets\" class=\"phenomic-HeadingAnchor\">#</a>What are presets?</h2>\n<p>Presets are a way of loading cssnano with different features, depending on\nyour use case, and they were introduced in version 4. Now, instead of having\nto opt-out of advanced transformations, you can choose to opt-in instead. Prior\nto the introduction of presets, code to perform advanced transformations was\ndownloaded from npm whether or not it was used. Presets ensure that this is no\nlonger the case, and also afford the ability to save configuration for cssnano\nto re-use across multiple contexts.</p>\n<h2 id=\"how-do-presets-work\"><a href=\"#how-do-presets-work\" class=\"phenomic-HeadingAnchor\">#</a>How do presets work?</h2>\n<p>cssnano runs a few different operations to check what preset it should use.\nFirstly, it checks that it was loaded with a preset when it was initialized;\nif so, it will use that one. For example, using a <code>postcss.config.js</code> in the\nproject root:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">module</span>.exports = {\n    <span class=\"hljs-attr\">plugins</span>: [\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'cssnano'</span>)({\n            <span class=\"hljs-attr\">preset</span>: <span class=\"hljs-string\">'default'</span>,\n        }),\n    ],\n};</code></pre>\n<p><em>The preset name points to a resolvable node module, optionally with the\n<code>cssnano-preset-</code> prefix. So you can specify <code>cssnano-preset-default</code> here\ninstead if you wish.</em></p>\n<p>If you need to pass any options to a preset, you must specify them using the\narray syntax instead. For example, you can remove all comments with the\nfollowing configuration:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">module</span>.exports = {\n    <span class=\"hljs-attr\">plugins</span>: [\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'cssnano'</span>)({\n            <span class=\"hljs-attr\">preset</span>: [<span class=\"hljs-string\">'default'</span>, {\n                <span class=\"hljs-attr\">discardComments</span>: {\n                    <span class=\"hljs-attr\">removeAll</span>: <span class=\"hljs-literal\">true</span>,\n                },\n            }]\n        }),\n    ],\n};</code></pre>\n<p>For other cases where the preset was not explicitly set, cssnano will look\nfor a section in your <code>package.json</code> or a <code>cssnano.config.js</code>, from the current\nworking directory upwards until it reaches your home directory. These two\nconfiguration examples function identically to the above:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"awesome-application\"</span>,\n  <span class=\"hljs-attr\">\"cssnano\"</span>: {\n    <span class=\"hljs-attr\">\"preset\"</span>: [\n      <span class=\"hljs-string\">\"default\"</span>,\n      {<span class=\"hljs-attr\">\"discardComments\"</span>: {<span class=\"hljs-attr\">\"removeAll\"</span>: <span class=\"hljs-literal\">true</span>}}\n    ]\n  }\n}</code></pre>\n<p>And the <code>cssnano.config.js</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> defaultPreset = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'cssnano-preset-default'</span>);\n\n<span class=\"hljs-built_in\">module</span>.exports = defaultPreset({\n    <span class=\"hljs-attr\">discardComments</span>: {\n        <span class=\"hljs-attr\">removeAll</span>: <span class=\"hljs-literal\">true</span>,\n    },\n});</code></pre>\n<p><em>The <code>cssnano.config.js</code> is useful if you need to make use of transformations\nthat can accept functions as parameters, for more specific use cases.</em></p>\n<p>If cssnano was not loaded with a preset explicitly, or a config section/file\nwere not found in any parent directories, then the defaults will be loaded.\nAn example <code>postcss.config.js</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">module</span>.exports = {\n    <span class=\"hljs-attr\">plugins</span>: [\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'cssnano'</span>),\n    ],\n};</code></pre>\n<p>For most use cases, the default preset should be suitable for your needs, but\nwe also offer an advanced preset which performs more aggressive transformations.\nYou can read more about this in\n<a href=\"/guides/advanced-transforms\">our advanced transformations guide</a>.</p>\n<h2 id=\"options-syntax\"><a href=\"#options-syntax\" class=\"phenomic-HeadingAnchor\">#</a>Options syntax</h2>\n<p>The options follow a simple pattern - the optional <code>postcss-</code> prefix is removed\nand then the rest should be converted into <code>camelCase</code>. So, if you need to set\nan option for <code>postcss-svgo</code>, you can do:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">module</span>.exports = {\n    <span class=\"hljs-attr\">plugins</span>: [\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'cssnano'</span>)({\n            <span class=\"hljs-attr\">preset</span>: [<span class=\"hljs-string\">'default'</span>, {\n                <span class=\"hljs-attr\">svgo</span>: {\n                    <span class=\"hljs-attr\">plugins</span>: [{\n                        <span class=\"hljs-attr\">removeDoctype</span>: <span class=\"hljs-literal\">false</span>,\n                    }],\n                },\n            }],\n        }),\n    ],\n};</code></pre>\n<h2 id=\"excluding-transforms\"><a href=\"#excluding-transforms\" class=\"phenomic-HeadingAnchor\">#</a>Excluding transforms</h2>\n<p>You may wish to exclude a transform from the list if it isn't required for your\nbuild; there are two possible ways to do this. The first is to set the option\nkey to <code>false</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">module</span>.exports = {\n    <span class=\"hljs-attr\">plugins</span>: [\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'cssnano'</span>)({\n            <span class=\"hljs-attr\">preset</span>: [<span class=\"hljs-string\">'default'</span>, {\n                <span class=\"hljs-attr\">svgo</span>: <span class=\"hljs-literal\">false</span>,\n            }],\n        }),\n    ],\n};</code></pre>\n<p>Alternately, if you have already supplied options and would prefer to exclude\na transform temporarily, you may set the <code>exclude</code> option:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">module</span>.exports = {\n    <span class=\"hljs-attr\">plugins</span>: [\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'cssnano'</span>)({\n            <span class=\"hljs-attr\">preset</span>: [<span class=\"hljs-string\">'default'</span>, {\n                <span class=\"hljs-attr\">svgo</span>: {\n                    <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-literal\">true</span>,\n                },\n            }],\n        }),\n    ],\n};</code></pre>\n","__filename":"guides/presets.md","__url":"/guides/presets/","__resourceUrl":"/guides/presets/index.html","__dataUrl":"/guides/presets/index.html.dde3d6917cfb2774001544ff77799678.json"}